/*
 * Gotify REST-API.
 * This is the documentation of the Gotify REST-API.  # Authentication In Gotify there are two token types: __clientToken__: a client is something that receives message and manages stuff like creating new tokens or delete messages. (f.ex this token should be used for an android app) __appToken__: an application is something that sends messages (f.ex. this token should be used for a shell script)  The token can be either transmitted through a header named `X-Gotify-Key` or a query parameter named `token`. There is also the possibility to authenticate through basic auth, this should only be used for creating a clientToken.  \\---  Found a bug or have some questions? [Create an issue on GitHub](https://github.com/gotify/server/issues)
 *
 * OpenAPI spec version: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.gotify.client.api;

import com.github.gotify.client.ApiException;
import com.github.gotify.client.model.Error;
import com.github.gotify.client.model.Message;
import com.github.gotify.client.model.PagedMessages;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessageApi
 */
@Ignore
public class MessageApiTest {

    private final MessageApi api = new MessageApi();

    
    /**
     * Create a message.
     *
     * __NOTE__: This API ONLY accepts an application token as authentication.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMessageTest() throws ApiException {
        Message body = null;
        Message response = api.createMessage(body);

        // TODO: test validations
    }
    
    /**
     * Delete all messages from a specific application.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppMessagesTest() throws ApiException {
        Integer id = null;
        api.deleteAppMessages(id);

        // TODO: test validations
    }
    
    /**
     * Deletes a message with an id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMessageTest() throws ApiException {
        Integer id = null;
        api.deleteMessage(id);

        // TODO: test validations
    }
    
    /**
     * Delete all messages.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMessagesTest() throws ApiException {
        api.deleteMessages();

        // TODO: test validations
    }
    
    /**
     * Return all messages from a specific application.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppMessagesTest() throws ApiException {
        Integer id = null;
        Integer limit = null;
        Integer since = null;
        PagedMessages response = api.getAppMessages(id, limit, since);

        // TODO: test validations
    }
    
    /**
     * Return all messages.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagesTest() throws ApiException {
        Integer limit = null;
        Integer since = null;
        PagedMessages response = api.getMessages(limit, since);

        // TODO: test validations
    }
    
    /**
     * Websocket, return newly created messages.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void streamMessagesTest() throws ApiException {
        Message response = api.streamMessages();

        // TODO: test validations
    }
    
}
