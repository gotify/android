/*
 * Gotify REST-API.
 * This is the documentation of the Gotify REST-API.  # Authentication In Gotify there are two token types: __clientToken__: a client is something that receives message and manages stuff like creating new tokens or delete messages. (f.ex this token should be used for an android app) __appToken__: an application is something that sends messages (f.ex. this token should be used for a shell script)  The token can be either transmitted through a header named `X-Gotify-Key` or a query parameter named `token`. There is also the possibility to authenticate through basic auth, this should only be used for creating a clientToken.  \\---  Found a bug or have some questions? [Create an issue on GitHub](https://github.com/gotify/server/issues)
 *
 * OpenAPI spec version: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.gotify.client.api;

import com.github.gotify.client.ApiException;
import com.github.gotify.client.model.Application;
import com.github.gotify.client.model.Client;
import com.github.gotify.client.model.Error;
import java.io.File;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokenApi
 */
@Ignore
public class TokenApiTest {

    private final TokenApi api = new TokenApi();

    
    /**
     * Create an application.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAppTest() throws ApiException {
        Application body = null;
        Application response = api.createApp(body);

        // TODO: test validations
    }
    
    /**
     * Create a client.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClientTest() throws ApiException {
        Client body = null;
        Client response = api.createClient(body);

        // TODO: test validations
    }
    
    /**
     * Delete an application.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppTest() throws ApiException {
        Integer id = null;
        api.deleteApp(id);

        // TODO: test validations
    }
    
    /**
     * Delete a client.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClientTest() throws ApiException {
        Integer id = null;
        api.deleteClient(id);

        // TODO: test validations
    }
    
    /**
     * Return all applications.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppsTest() throws ApiException {
        List<Application> response = api.getApps();

        // TODO: test validations
    }
    
    /**
     * Return all clients.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientsTest() throws ApiException {
        List<Client> response = api.getClients();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload an image for an application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadAppImageTest() throws ApiException {
        File file = null;
        Integer id = null;
        Application response = api.uploadAppImage(file, id);

        // TODO: test validations
    }
    
}
